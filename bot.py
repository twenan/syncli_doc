import asyncio
import os
import datetime
import logging
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.shared import Pt
from fpdf import FPDF
from num2words import num2words
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from config import Config, load_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
config: Config = load_config()
BOT_TOKEN: str = config.tg_bot.token

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class ContractStates(StatesGroup):
    GET_CUSTOMER_NAME = State()
    GET_CONTRACT_AMOUNT = State()
    GET_PRODUCT_NAME = State()
    GET_BANK_DETAILS = State()

# –®–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞
TEMPLATE_PATH = "template.docx"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –º–µ—Ç–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
def replace_placeholders(doc, placeholders):
    for paragraph in doc.paragraphs:
        for key, value in placeholders.items():
            if key in paragraph.text:
                paragraph.text = paragraph.text.replace(key, value)
                if key == "{–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞}":
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                if key == "{–ó–∞–∫–∞–∑—á–∏–∫}":
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for key, value in placeholders.items():
                    if key in cell.text:
                        cell.text = cell.text.replace(key, value)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –∏–∑ DOCX
def create_pdf(docx_path, pdf_path):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Times", size=13)
    doc = Document(docx_path)
    for paragraph in doc.paragraphs:
        pdf.multi_cell(0, 10, paragraph.text)
    pdf.output(pdf_path)

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    welcome_text = (
        "ü§ñ **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?**\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞"))

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")
    await state.set_state(ContractStates.GET_CUSTOMER_NAME)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞
@dp.message(ContractStates.GET_CUSTOMER_NAME)
async def get_customer_name(message: types.Message, state: FSMContext):
    await state.update_data(customer_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ü–∏—Ñ—Ä–∞–º–∏):")
    await state.set_state(ContractStates.GET_CONTRACT_AMOUNT)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–≥–æ–≤–æ—Ä–∞
@dp.message(ContractStates.GET_CONTRACT_AMOUNT)
async def get_contract_amount(message: types.Message, state: FSMContext):
    await state.update_data(contract_amount=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ:")
    await state.set_state(ContractStates.GET_PRODUCT_NAME)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(ContractStates.GET_PRODUCT_NAME)
async def get_product_name(message: types.Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–ò–ù–ù, –û–ì–†–ù–ò–ü, —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç, –±–∞–Ω–∫, –ë–ò–ö, –∫–æ—Ä—Ä. —Å—á–µ—Ç, —Ç–µ–ª–µ—Ñ–æ–Ω):")
    await state.set_state(ContractStates.GET_BANK_DETAILS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
@dp.message(ContractStates.GET_BANK_DETAILS)
async def get_bank_details(message: types.Message, state: FSMContext):
    await state.update_data(bank_details=message.text)
    data = await state.get_data()

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    doc = Document(TEMPLATE_PATH)
    placeholders = {
        "{–ó–∞–∫–∞–∑—á–∏–∫}": f"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å {data['customer_name']}",
        "{–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞}": datetime.datetime.now().strftime("%d.%m.%Y"),
        "{–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ}": data['product_name'],
        "{–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç —Ü–∏—Ñ—Ä–∞–º–∏}": data['contract_amount'],
        "{–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –ø—Ä–æ–ø–∏—Å—å—é}": num2words(int(data['contract_amount']), lang='ru') + " —Ä—É–±–ª–µ–π 00 –∫–æ–ø–µ–µ–∫",
        "{–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã}": data['bank_details']
    }
    replace_placeholders(doc, placeholders)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX
    docx_output_path = "output.docx"
    doc.save(docx_output_path)

    # –°–æ–∑–¥–∞–Ω–∏–µ PDF
    pdf_output_path = "output.pdf"
    create_pdf(docx_output_path, pdf_output_path)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã
    if os.path.exists(docx_output_path) and os.path.exists(pdf_output_path):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await message.answer("–ì–æ—Ç–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:")
            await message.answer_document(types.FSInputFile(docx_output_path))
            await message.answer_document(types.FSInputFile(pdf_output_path))
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ–≥–æ–≤–æ—Ä–∞.")

    await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
