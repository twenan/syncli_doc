import asyncio
import os
import datetime
import logging
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.shared import Pt  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
from docx.oxml.ns import qn  # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
from fpdf import FPDF
from datetime import datetime, timedelta
from num2words import num2words
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from config import Config, load_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
config: Config = load_config()
BOT_TOKEN: str = config.tg_bot.token

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class ContractStates(StatesGroup):
    GET_CUSTOMER_NAME = State()
    GET_CONTRACT_AMOUNT = State()
    GET_PRODUCT_NAME = State()
    GET_BANK_DETAILS = State()

# –®–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞
TEMPLATE_PATH = "template.docx"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –º–µ—Ç–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
def replace_placeholders(doc, placeholders):
    # –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
    for paragraph in doc.paragraphs:
        for key, value in placeholders.items():
            paragraph_text = ''.join(run.text for run in paragraph.runs)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Ä–∞–∑–¥–µ–ª—ë–Ω
            if key.lower() in paragraph_text.lower():
                logging.info(f"–ù–∞–π–¥–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä '{key}' –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ: {paragraph_text}")
                inline = paragraph.runs
                for i in range(len(inline)):
                    if key.lower() in inline[i].text.lower():
                        inline[i].text = inline[i].text.lower().replace(key.lower(), value)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç Times New Roman
                for run in paragraph.runs:
                    run.font.name = 'Times New Roman'
                    run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Times New Roman')
                    run.font.size = Pt(13)

                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
                if key.lower() == "{—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ 1}":
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                elif key.lower() in [
                    "{–∑–∞–∫–∞–∑—á–∏–∫ 1}",
                    "{–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ}",
                    "{—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞}",
                    "{–ø–æ–ª—Ç–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã}",
                    "{—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç —Ü–∏—Ñ—Ä–∞–º–∏}",
                    "{—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –ø—Ä–æ–ø–∏—Å—å—é}",
                ]:
                    paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

    # –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                cell_text = cell.text
                for key, value in placeholders.items():
                    if key.lower() in cell_text.lower():
                        logging.info(f"–ù–∞–π–¥–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä '{key}' –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {cell_text}")
                        new_text = cell_text.lower().replace(key.lower(), value)
                        cell.text = new_text

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
                        for paragraph in cell.paragraphs:
                            for run in paragraph.runs:
                                run.font.name = 'Times New Roman'
                                run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Times New Roman')
                                run.font.size = Pt(13)

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
                        for paragraph in cell.paragraphs:
                            if key.lower() == "{—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ 1}":
                                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER
                            elif key.lower() in [
                                "{–∑–∞–∫–∞–∑—á–∏–∫ 1}",
                                "{–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ}",
                                "{—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞}",
                                "{–ø–æ–ª—Ç–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã}",
                                "{—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç —Ü–∏—Ñ—Ä–∞–º–∏}",
                                "{—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –ø—Ä–æ–ø–∏—Å—å—é}",
                            ]:
                                paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –∏–∑ DOCX
def create_pdf(docx_path, pdf_path):
    pdf = FPDF()
    pdf.add_page()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    pdf.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', uni=True)
    pdf.set_font("DejaVu", size=13)

    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ DOCX
    doc = Document(docx_path)
    for paragraph in doc.paragraphs:
        pdf.multi_cell(0, 10, paragraph.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
    pdf.output(pdf_path)

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    welcome_text = (
        "ü§ñ **–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤.\n\n"
        "–°–æ–±–µ—Ä—ë–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üöÄ –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞"
@dp.message(lambda message: message.text == "üöÄ –ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞")
async def start_contract_filling(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞:")
    await state.set_state(ContractStates.GET_CUSTOMER_NAME)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û –∑–∞–∫–∞–∑—á–∏–∫–∞
@dp.message(ContractStates.GET_CUSTOMER_NAME)
async def get_customer_name(message: types.Message, state: FSMContext):
    await state.update_data(customer_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ü–∏—Ñ—Ä–∞–º–∏):")
    await state.set_state(ContractStates.GET_CONTRACT_AMOUNT)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ–≥–æ–≤–æ—Ä–∞
@dp.message(ContractStates.GET_CONTRACT_AMOUNT)
async def get_contract_amount(message: types.Message, state: FSMContext):
    await state.update_data(contract_amount=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ:")
    await state.set_state(ContractStates.GET_PRODUCT_NAME)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(ContractStates.GET_PRODUCT_NAME)
async def get_product_name(message: types.Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–ò–ù–ù, –û–ì–†–ù–ò–ü, —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç, –±–∞–Ω–∫, –ë–ò–ö, –∫–æ—Ä—Ä. —Å—á–µ—Ç, —Ç–µ–ª–µ—Ñ–æ–Ω):")
    await state.set_state(ContractStates.GET_BANK_DETAILS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞
@dp.message(ContractStates.GET_BANK_DETAILS)
async def get_bank_details(message: types.Message, state: FSMContext):
    await state.update_data(bank_details=message.text)
    data = await state.get_data()

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    today_date = datetime.now().strftime("%d.%m.%Y")
    # –î–∞—Ç–∞ —á–µ—Ä–µ–∑ 45 –¥–Ω–µ–π
    future_date = (datetime.now() + timedelta(days=45)).strftime("%d.%m.%Y")

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    doc = Document(TEMPLATE_PATH)
    placeholders = {
    "{—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ 1}": today_date,
    "{–∑–∞–∫–∞–∑—á–∏–∫ 1}": f"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å {data.get('customer_name', '–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')}",
    "{–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ}": data.get('product_name', '–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'),
    "{—Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞}": today_date,
    "{–ø–æ–ª—Ç–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã}": future_date,
    "{—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç —Ü–∏—Ñ—Ä–∞–º–∏}": data.get('contract_amount', '0'),
    "{—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –ø—Ä–æ–ø–∏—Å—å—é}": num2words(int(data.get('contract_amount', '0')), lang='ru') + " —Ä—É–±–ª–µ–π 00 –∫–æ–ø–µ–µ–∫"
}


    replace_placeholders(doc, placeholders)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DOCX
    try:
        docx_output_path = "/home/anna/syncli_doc/syncli_doc/output.docx"
        doc.save(docx_output_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ DOCX: {str(e)}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ DOCX: {str(e)}")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ PDF
    try:
        pdf_output_path = "/home/anna/syncli_doc/syncli_doc/output.pdf"
        create_pdf(docx_output_path, pdf_output_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if os.path.exists(docx_output_path) and os.path.exists(pdf_output_path):
        try:
            await message.answer("–ì–æ—Ç–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:")
            await message.answer_document(types.FSInputFile(docx_output_path))
            await message.answer_document(types.FSInputFile(pdf_output_path))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    else:
        logging.error("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–æ–≥–æ–≤–æ—Ä–∞.")

    await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
